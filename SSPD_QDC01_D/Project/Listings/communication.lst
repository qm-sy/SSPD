C51 COMPILER V9.60.7.0   COMMUNICATION                                                     06/24/2025 15:34:01 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE COMMUNICATION
OBJECT MODULE PLACED IN ..\Output\communication.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE ..\BSP\Src\communication.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\
                    -BSP\Inc;..\Core\Inc;..\Driver;..\Emembed\Inc;..\SYSTEM\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\communication.lst) OBJEC
                    -T(..\Output\communication.obj)

line level    source

   1          #include "communication.h"
   2          
   3          RS485 rs485;
   4          SATA  sata;
   5          
   6          uint8_t TX1_busy_Flag = 0;
   7          
   8          /**
   9           * @brief       串口4调用结构体 rs485 初始化
  10           *
  11           * @param   
  12           *
  13           * @return  void
  14          **/
  15          void Uart4_Send_Statu_Init( void )
  16          {
  17   1          rs485.RX4_rev_end_Flag = 0;
  18   1          rs485.TX4_buf[128] = 0;
  19   1          rs485.RX4_buf[128] = 0;
  20   1          rs485.TX4_send_bytelength = 0;
  21   1          rs485.TX4_send_cnt = 0;
  22   1          rs485.RX4_rev_timeout = 0;
  23   1          rs485.RX4_rev_cnt = 0;
  24   1          DR_485 = 0;
  25   1          rs485.scan_04_flag = 1;
  26   1          rs485.connect_flag = 0;
  27   1      }
  28          
  29          /**
  30           * @brief       串口4调用结构体 rs485 初始化
  31           *
  32           * @param   
  33           *
  34           * @return  void
  35          **/
  36          void Uart1_Send_Statu_Init( void )
  37          {
  38   1          sata.RX1_rev_end_Flag = 0;
  39   1          sata.TX1_buf[128] = 0;
  40   1          sata.RX1_buf[128] = 0;
  41   1          sata.TX1_send_bytelength = 0;
  42   1          sata.TX1_send_cnt = 0;
  43   1          sata.RX1_rev_timeout = 0;
  44   1          sata.RX1_rev_cnt = 0;
  45   1      }
  46          
  47          /**
  48           * @brief       串口4中断处理函数
  49           *
  50           * @param   
  51           *
  52           * @return  void
  53          **/
C51 COMPILER V9.60.7.0   COMMUNICATION                                                     06/24/2025 15:34:01 PAGE 2   

  54          void Uart4_ISR() interrupt 18 
  55          {   
  56   1      
  57   1          /* 1, 检测到S4TI置1，即发送完毕                       */
  58   1          if( S4CON & S4TI )          //
  59   1          {
  60   2              /* 2, 软件将S4TI清零，等待发送标志位重置，可继续发送    */
  61   2              S4CON &= ~S4TI;         
  62   2              
  63   2              /* 3, 依次将TX4_buf中数据送出（写S4BUF操作即为发送）    */
  64   2              if( rs485.TX4_send_bytelength != 0 )
  65   2              {
  66   3                  S4BUF = rs485.TX4_buf[rs485.TX4_send_cnt++];
  67   3                  rs485.TX4_send_bytelength--;
  68   3              }else
  69   2              {
  70   3                  rs485.TX4_send_cnt = 0;
  71   3                  DR_485 = 0;
  72   3              }
  73   2          }
  74   1          
  75   1          /* 1, 检测到S2RI置1，即接收完毕                       */
  76   1          if( S4CON & S4RI )
  77   1          {
  78   2              /* 2, 软件将S2RI清零，等待接收标志位重置，可继续发送    */
  79   2              S4CON &= ~S4RI;
  80   2              /* 3, 判断数据包是否接收完毕                           */
  81   2              if( !rs485.RX4_rev_end_Flag )
  82   2              {
  83   3                  /* 4, 数据包大于RX_buf 则从头计数                  */
  84   3                  if( rs485.RX4_rev_cnt > 128 )
  85   3                  {
  86   4                      rs485.RX4_rev_cnt = 0;
  87   4                  }
  88   3      
  89   3                  /* 5, 依次将RX4_buf中数据接收（读S2BUF操作即为接收）*/
  90   3                  rs485.RX4_buf[rs485.RX4_rev_cnt] = S4BUF;
  91   3                  rs485.RX4_rev_cnt++;
  92   3              }
  93   2              /* 6, 重置接收完毕判断时间                              */
  94   2              rs485.RX4_rev_timeout = 5;
  95   2          }
  96   1      }
  97          
  98          
  99          // /**
 100          //  * @brief    串口1中断处理函数
 101          //  *
 102          //  * @param   
 103          //  *
 104          //  * @return  void
 105          // **/
 106          // void Uart1_ISR() interrupt 4 
 107          // {   
 108          //     /* 1, 检测到S4TI置1，即发送完毕                       */
 109          //     if( TI == 1 )          //
 110          //     {
 111          //         /* 2, 软件将S4TI清零，等待发送标志位重置，可继续发送    */
 112          //         TI = 0;         
 113                  
 114          //         /* 3, 依次将TX4_buf中数据送出（写S4BUF操作即为发送）    */
 115          //         if( sata.TX1_send_bytelength != 0 )
C51 COMPILER V9.60.7.0   COMMUNICATION                                                     06/24/2025 15:34:01 PAGE 3   

 116          //         {
 117          //             SBUF = sata.TX1_buf[sata.TX1_send_cnt++];
 118          //             sata.TX1_send_bytelength--;
 119          //         }else
 120          //         {
 121          //             sata.TX1_send_cnt = 0;
 122          //         }
 123          //     }
 124              
 125          //     /* 1, 检测到S2RI置1，即接收完毕                       */
 126          //     if( RI == 1 )
 127          //     {
 128          //         /* 2, 软件将S2RI清零，等待接收标志位重置，可继续发送    */
 129          //         RI = 0;
 130          //         /* 3, 判断数据包是否接收完毕                           */
 131          //         if( !sata.RX1_rev_end_Flag )
 132          //         {
 133          //             /* 4, 数据包大于RX_buf 则从头计数                  */
 134          //             if( sata.RX1_rev_cnt > 128 )
 135          //             {
 136          //                 sata.RX1_rev_cnt = 0;
 137          //             }
 138          
 139          //             /* 5, 依次将RX4_buf中数据接收（读S2BUF操作即为接收）*/
 140          //             sata.RX1_buf[sata.RX1_rev_cnt] = SBUF;
 141          //             sata.RX1_rev_cnt++;
 142          //         }
 143          //         /* 6, 重置接收完毕判断时间                              */
 144          //         sata.RX1_rev_timeout = 5;
 145          //     }
 146          // }
 147          
 148          /**
 149           * @brief       是否接收完毕判断函数
 150           *
 151           * @param   
 152           *
 153           * @return  void
 154          **/
 155          void Tim0_ISR( void ) interrupt 1   //1ms
 156          {
 157   1          /* 1, 如果接收未超时                                             */
 158   1          if ( rs485.RX4_rev_timeout != 0 )  
 159   1          {
 160   2              rs485.RX4_rev_timeout--;
 161   2              /* 2, 如果接收超时                                          */
 162   2              if( rs485.RX4_rev_timeout == 0 )  
 163   2              {
 164   3                  if( rs485.RX4_rev_cnt > 0 )  
 165   3                  {   
 166   4                       /* 3, 接收完毕标志位亮起并初始化接收缓冲区         */
 167   4                      rs485.RX4_rev_end_Flag = 1;    
 168   4                  }
 169   3              }
 170   2          } 
 171   1      
 172   1          // /* 1, 如果接收未超时                                             */
 173   1          // if ( sata.RX1_rev_timeout != 0 )  
 174   1          // {
 175   1          //     sata.RX1_rev_timeout--;
 176   1          //     /* 2, 如果接收超时                                          */
 177   1          //     if( sata.RX1_rev_timeout == 0 )  
C51 COMPILER V9.60.7.0   COMMUNICATION                                                     06/24/2025 15:34:01 PAGE 4   

 178   1          //     {
 179   1          //         if( sata.RX1_rev_cnt > 0 )  
 180   1          //         {   
 181   1          //              /* 3, 接收完毕标志位亮起并初始化接收缓冲区         */
 182   1          //             sata.RX1_rev_end_Flag = 1;    
 183   1          //         }
 184   1          //     }
 185   1          // } 
 186   1      }
 187          
 188          
 189          /**
 190           * @brief       串口1中断处理函数
 191           *
 192           * @param   
 193           *
 194           * @return  void
 195          **/
 196          void Uart1_ISR() interrupt 4
 197          {
 198   1          if(TI == 1)
 199   1          {
 200   2              TI = 0;
 201   2              TX1_busy_Flag = 0;
 202   2          }
 203   1          if(RI == 1)
 204   1          {
 205   2              RI = 0;
 206   2          }
 207   1      }
 208          
 209          /**
 210           * @brief       串口重定向
 211           *
 212           * @param   c:字符串
 213           *
 214           * @return  c
 215          **/
 216          char putchar(char c)  // 串口重定向需要添加头文件stdio.h
 217          {
 218   1          SBUF = c;
 219   1          while(TX1_busy_Flag);
 220   1          TX1_busy_Flag = 1;
 221   1          return c;
 222   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    285    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    528    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
